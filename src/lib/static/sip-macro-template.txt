/*********************************************************************
Copyright (c) 2022 Cisco and/or its affiliates.
This software is licensed to you under the terms of the Cisco Sample
Code License, Version 1.1 (the "License"). You may obtain a copy of the
License at https://developer.cisco.com/docs/licenses
All use of the material herein must be in accordance with the terms of
the License. All rights not expressly granted by the License are
reserved. Unless required by applicable law or agreed to separately in
writing, software distributed under the License is distributed on an "AS
IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
or implied.
***********************************************************************
*
* Version: 1-1-1
* Released: 04/01/24
*
* This is a Webex Device Macro which displays a video while
* waiting in a Webex Calling call queue:
*
* Features:
* 1. Supports multiple call queues & video content display
* 2. Can auto hide/unhide Call control UI in and out of call
*
* Requirements:
* 1. Webex Device must be provisioned with a Webex Calling subscription
* 2. A call queue must be setup on control hub and its number added to the macro
* 3. Agents must be added to the call queue so the call can be answered
*
* Full Readme and source code available on Github:
* https://github.com/wxsd-sales/video-queue-macro
*
*
* Support:
* Please reach out to the WXSD team at wxsd@external.cisco.com
********************************************************/
import xapi from 'xapi';

/*********************************************************
 * Configure the settings below
**********************************************************/

const config = {
  queues: [       // Array of queues to monitor and display commercials
    ${queues}
  ],
  hideInCallUI: false,  // true = hide in call call controls, false = show controls
}


/*********************************************************
 * Below contains all macros functions
**********************************************************/

// Subscribe to Events & Status changes
xapi.Status.Call['*'].ghost.on(hideCommercial);
xapi.Status.SystemUnit.State.NumberOfActiveCalls.on(processCallCount);
xapi.Status.UserInterface.WebView.on(processWebViews);
xapi.Status.Call.RemoteNumber.on(processRemoteNumber);
xapi.Status.Call.CallbackNumber.on(processCallbackNumber);

async function main(){
  let registered = await checkCallingRegistered();
  if (!registered) showCallingAlert()
}

main()

async function checkCallingRegistered(){
  try {
    let status = await xapi.Status.SIP.Registration[1].Status.get()
    console.log('SIP Registration Status:', status);
    return (status === 'Registered')
  } catch (error) {
    console.warn('Error getting SIP Registration Status:', error.message)
    return false
  }
}

function showCallingAlert(){
  alert("Warning", "This device is not registered to Webex Calling services. Click to call from Kiosk mode is not available");
}

function alert(title, message, duration){
  switch (title.toLowerCase()) {
    case 'error':
      console.error(title + ': ' + message);
      break;
    case 'warning':
      console.warn(title + ': ' + message);
      break;
    default:
      console.log(title + ': ' + message);
  }

  xapi.Command.UserInterface.Message.Alert.Display
    ({Duration: duration ? duration : 4, Text: message, Title: title});
}

function processCallbackNumber(event){
  console.log(`Callback Number[${ event }]`);
  for(let q of config.queues){
    if(event.indexOf(`:${q.number}`) < 0){
      // If the callback number doesn't match the queue, show the commercial
      hideCommercial();
    }
  }
}

function processRemoteNumber(event){
  // We were previously using the Remote Number changes to hide the commercial,
  // but Callback Number changes work for Calling registered and unregistered devices.
  console.log(`Remote Number[${ event }]`);
  // Check if a monitoring number is present
  const match = config.queues.find(queue => event.startsWith(queue.number))
  // Ignore calls with unmatched number
  if(!match) {
    console.log('No number matched');
  } else {
    showCommercial(match)
  }
}

async function processWebViews(event) {
  console.log(JSON.stringify(event));
  if (!event.hasOwnProperty('URL')) return;
  const url = event.URL;
  const id = event.id;
  const sipURI = url.split('#')[Number('1')]

  if(sipURI) {
    let registered = await checkCallingRegistered();
    if (!registered) {
      showCallingAlert()
      return
    }
    xapi.Command.Dial({ Number: sipURI })
  }
}

async function processCallCount(event) {
  console.log('Number of calls: ' + event)
  if(event == '0') {
    hideCommercial();
    setUIVisibility(!config.hideUI)
  } else {
    setUIVisibility(!config.hideInCallUI)
  }
}

function showCommercial({title, url, mode, target }) {
  console.log(`Opening Webview on[${ target }]- Title: ${ title } | Mode: ${ mode } | Url: ${ url } `)
  xapi.Command.UserInterface.WebView.Display(
    { Mode: mode, Target: target, Title: title, Url: url })
    .catch(e => console.log('Error opening webview: ' + e.message))
}

function hideCommercial() {
  console.log('Hiding Any Commercial')
  xapi.Command.UserInterface.WebView.Clear();
}

function setUIVisibility(state){
  console.log('Setting UI Visibility to: ' + state)
  xapi.Config.UserInterface.Features.HideAll.set(state ? 'False' : 'True');
}
